#pragma once

#define MIK32SD_SECTOR_LEN_BYTES    512

typedef enum
{
    MIK32SD_CMD0 = 0x40+0,
    MIK32SD_CMD1 = 0x40+1,
    MIK32SD_CMD6 = 0x40+6,
    MIK32SD_CMD8 = 0x40+8,
    MIK32SD_CMD9 = 0x40+9,
    MIK32SD_CMD10 = 0x40+10,
    MIK32SD_CMD12 = 0x40+12,
    MIK32SD_CMD13 = 0x40+13,
    MIK32SD_CMD16 = 0x40+16,
    MIK32SD_CMD17 = 0x40+17,
    MIK32SD_CMD18 = 0x40+18,
    MIK32SD_CMD24 = 0x40+24,
    MIK32SD_CMD25 = 0x40+25,
    MIK32SD_CMD27 = 0x40+27,
    MIK32SD_CMD28 = 0x40+28,
    MIK32SD_CMD29 = 0x40+29,
    MIK32SD_CMD30 = 0x40+30,
    MIK32SD_CMD32 = 0x40+32,
    MIK32SD_CMD33 = 0x40+33,
    MIK32SD_CMD38 = 0x40+38,
    MIK32SD_CMD42 = 0x40+42,
    MIK32SD_CMD55 = 0x40+55,
    MIK32SD_CMD56 = 0x40+56,
    MIK32SD_CMD58 = 0x40+58,
    MIK32SD_CMD59 = 0x40+59,
    MIK32SD_ACMD41 = 0x40+41,
} MIK32SD_CMD_TypeDef;

typedef enum
{
    MIK32SD_TYPE_SDV1 = 0,
    MIK32SD_TYPE_SDV2 = 1,
    MIK32SD_TYPE_SDHC = 2,
    MIK32SD_TYPE_MMC = 3,
    MIK32SD_TYPE_UNKNOWN = 4,
} MIK32SD_Type_TypeDef;

typedef enum
{
    MIK32SD_VOLT_1_6_TO_1_7 = 1<<4,
    MIK32SD_VOLT_1_7_TO_1_8 = 1<<5,
    MIK32SD_VOLT_1_8_TO_1_9 = 1<<6,
    MIK32SD_VOLT_1_9_TO_2_0 = 1<<7,
    MIK32SD_VOLT_2_0_TO_2_1 = 1<<8,
    MIK32SD_VOLT_2_1_TO_2_2 = 1<<9,
    MIK32SD_VOLT_2_2_TO_2_3 = 1<<10,
    MIK32SD_VOLT_2_3_TO_2_4 = 1<<11,
    MIK32SD_VOLT_2_4_TO_2_5 = 1<<12,
    MIK32SD_VOLT_2_5_TO_2_6 = 1<<13,
    MIK32SD_VOLT_2_6_TO_2_7 = 1<<14,
    MIK32SD_VOLT_2_7_TO_2_8 = 1<<15,
    MIK32SD_VOLT_2_8_TO_2_9 = 1<<16,
    MIK32SD_VOLT_2_9_TO_3_0 = 1<<17,
    MIK32SD_VOLT_3_0_TO_3_1 = 1<<18,
    MIK32SD_VOLT_3_1_TO_3_2 = 1<<19,
    MIK32SD_VOLT_3_2_TO_3_3 = 1<<20,
    MIK32SD_VOLT_3_3_TO_3_4 = 1<<21,
    MIK32SD_VOLT_3_4_TO_3_5 = 1<<22,
    MIK32SD_VOLT_3_5_TO_3_6 = 1<<23,
} MIK32SD_Voltage_TypeDef;

typedef enum
{
    MIK32SD_TOKEN_SINGLE_READ_START = 0xFE,
    MIK32SD_TOKEN_SINGLE_WRITE_START = 0xFE,
    MIK32SD_TOKEN_MULTIPLE_WRITE_START = 0xFC,
} MIK32SD_Tokens_TypeDef;

typedef enum
{
    MIK32SD_DATA_RESP_ACCEPTED = 0b00000101,
    MIK32SD_DATA_RESP_REJECTED_CRC = 0b00001011,
    MIK32SD_DATA_RESP_REJECTED_WRITE_ERROR = 0b00001101,
} MIK32SD_DataResponse_TypeDef;

typedef enum
{
    MIK32SD_STATUS_OK = 0,
    MIK32SD_STATUS_INCORRECT_VOLTAGE = 128,
    MIK32SD_STATUS_UNKNOWN_CARD = 129,
    MIK32SD_STATUS_TIMEOUT_ERROR = 130,
    MIK32SD_STATUS_COMMUNICATION_ERROR = 131,
    MIK32SD_STATUS_OPERATION_ERROR = 132,
    MIK32SD_STATUS_SPI_ERROR = 133,
    MIK32SD_STATUS_R1_MSB,
    MIK32SD_STATUS_R1_PARAMETER_ERROR,
    MIK32SD_STATUS_R1_ADDRESS_ERROR,
    MIK32SD_STATUS_R1_ERASE_SEQ_ERROR,
    MIK32SD_STATUS_R1_COM_CRC_ERROR,
    MIK32SD_STATUS_R1_ILLEGAL_COMMAND,
    MIK32SD_STATUS_R1_ERASE_RESET,
    MIK32SD_STATUS_R1_IDLE_STATE,
    MIK32SD_STATUS_DATA_RESP_CRC_ERROR,
    MIK32SD_STATUS_DATA_RESP_WRITE_ERROR,
    MIK32SD_STATUS_DATA_RESP_INCORRECT,
} MIK32SD_Status_TypeDef;