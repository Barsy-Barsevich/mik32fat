#pragma once

enum __FileSystemCodes
{
    MIK32FAT_FS_CODE_FAT32_WITHOUT_LFN = 0x0B,
    MIK32FAT_FS_CODE_FAT32_WITH_LFN = 0x0C,
};

enum __MasterBootRecord
{
    MIK32FAT_MBR_PART0_OFFSET = 0x1BE,
    MIK32FAT_MBR_PART1_OFFSET = 0x1CE,
    MIK32FAT_MBR_PART2_OFFSET = 0x1DE,
    MIK32FAT_MBR_PART3_OFFSET = 0x1EE,
    MIK32FAT_MBR_SIGNATURE_OFFSET = 0x1FE,
    MIK32FAT_MBR_PARTITION_LEN_BYTES = 16,
};

enum __Partition
{
    MIK32FAT_PART_BOOT_FLAG_OFFSET = 0,
    MIK32FAT_PART_CHS_BEGIN_OFFSET = 1,
    MIK32FAT_PART_TYPECODE_OFFSET = 4,
    MIK32FAT_PART_CHS_END_OFFSET = 5,
    MIK32FAT_PART_LBA_BEGIN_OFFSET = 8,
    MIK32FAT_PART_NUM_OF_SECTORS_OFFSET = 12,
};

enum __FileSystemsLBA
{
    MIK32FAT_BPB_BYTES_PER_SECTOR_OFFSET = 0x0B,
    MIK32FAT_BPB_SECTORS_PER_CLUSTER_OFFSET = 0x0D,
    MIK32FAT_BPB_RES_SECTORS_COUNT_OFFSET = 0x0E,
    MIK32FAT_BPB_NUM_OF_FATS_OFFSET = 0x10,
    MIK32FAT_BPB_FAT_SIZE_OFFSET = 0x24,
    MIK32FAT_BPB_ROOT_CLUSTER_OFFSET = 0x2C,
};

enum __FATEntire
{
    MIK32FAT_DIR_NAME_OFFSET = 0,
    MIK32FAT_DIR_ATTR_OFFSET = 11,
    MIK32FAT_DIR_NTRES_OFFSET = 12,
    MIK32FAT_DIR_CRTTIMETENTH_OFFSET = 13,
    // Creation time
    MIK32FAT_DIR_CRTTIME_OFFSET = 14,
    // Creation date
    MIK32FAT_DIR_CRTDATE_OFFSET = 16,
    // Last access date
    MIK32FAT_DIR_LSTACCDATE_OFFSET = 18,
    MIK32FAT_DIR_FIRST_CLUS_HI_OFFSET = 20,
    // Writing time
    MIK32FAT_DIR_WRTTIME_OFFSET = 22,
    // Writing date
    MIK32FAT_DIR_WRTDATE_OFFSET = 24,
    MIK32FAT_DIR_FIRST_CLUS_LO_OFFSET = 26,
    MIK32FAT_DIR_FILE_SIZE_OFFSET = 28,
};

#define MIK32FAT_ENTIRE_SIZE_BYTES  32

enum __Attributes
{
    MIK32FAT_ATTR_READ_ONLY = 0x01,
    MIK32FAT_ATTR_HIDDEN = 0x02,
    MIK32FAT_ATTR_SYSTEM = 0x04,
    MIK32FAT_ATTR_VOLUME_ID = 0x08,
    MIK32FAT_ATTR_DIRECTORY = 0x10,
    MIK32FAT_ATTR_ARCHIVE = 0x20,
};

typedef enum __Status
{
    MIK32FAT_STATUS_OK = 0,
    MIK32FAT_STATUS_DISK_ERROR,
    /* Disk not formatted for FAT32 */
    MIK32FAT_STATUS_DISK_NOT_FORM,
    MIK32FAT_STATUS_ERROR,
    MIK32FAT_STATUS_NOT_FOUND,
    MIK32FAT_STATUS_NO_FREE_SPACE,
    MIK32FAT_STATUS_INCORRECT_ARGUMENT,
    MIK32FAT_STATUS_NAME_ERROR,
} MIK32FAT_Status_TypeDef;